Notes on Fontifying a List

(Based on experiences with RSP and LAK)

Letter subscripts
=================

OSL now requires the use of ^ with letter subscripts that are added by
modern list reviewers. Thus, LAK024 includes both NU₁₁ and NU₁₁@t;
LAK024^b is used for NU₁₁@t.

In LAK, letter subscripts are used both on the main number and within
an entry.  On a main number they indicate separate signs, e.g., LAK046
vs LAK046a. Within an entry, where they are followed by a closing
parenthesis, they indicate glyph variants, e.g., LAK379a) and LAK397b)
where the former applies to two glyph variants and the latter to one.

This also raises the question: do we need separate notations for
list-reviewer-splits-sign and
list-reviewer-wants-to-address-glyph-variant? The answer is probably yes.

The simplest is to allow comma-number, e.g., LAK046, LAK046a,
LAK046a,1. The comma would correspond to '.' on SALT, so the font
character for LAK046a,1 would be predictable as uF1008.1.

For list glyph variants, like LAK379a) it would be preferable to use
matching '.' ')'.  The two glyphs in LAK379a) would then be LAK379(a)
and LAK379(a),1

1:1 List::Unicode
=================

@list in osl.asl; character in font

When the list has more than one glyph for the entry, add them as SALT

Choose a representative form for the unmarked (non-SALT) form; SALT
variants don't have to be in order of sign list.  It should pass the
test: if only one of the form-variants is displayed, will it be
representative of the sign in the given font/period?


Mergers
=======

All of the merged numbers should be given as Unicode values of a
single sign, e.g., u12254 = 12254 1214E.

For ED ARAD, which is an UR III split from UŠ, add 𒀴 as a Unicode
value of 𒍑 in the font's character info.  This coaxes dur₃ into having
the form 𒀲𒍑 rather than 𒀲𒀴.


1:M List::Unicode
=================

When a list entry is split into multiple Unicode characters, one
solution is to split the entry with ^a, ^b suffixes, e.g., RSP036bis,
RSP036bis^a etc.

When multiple glyphs are given, assign them to the respective Unicode
font characters; they can also optionally be included under the main
list entry so they display in the sign list in a single place as well
as under the individual entries.

RSP005 (DIŠ) 𒁹 u12079 𒀹 u12079.1

RSP005^a (Aš@t) 𒀹 u12039

Some cases are more complex.  RSP039 contains the glyphs 𒋰 𒑊 𒈫. The
first is TAB (RSP039); the third is MIN (RSP039^b); the second
corresponds to two OSL entries, TAB@t and 2(AŠ@t); OSL uses RSP039^a
for both entries.


M:1 List::Unicode
=================

When multiple list entries correspond to a single Unicode character,
gather all the glyphs as SALT variants of the font character.

By default, all of the SALT variants for a Unicode character are
displayed.

The correlation between specific SALT variants and individual list
entries is managed by adding a font features list to the @list entry:

@list	RSP006 .1 .2 .3 .4
@list	RSP008 ŠUŠ 𒌋 šuš šu₄ .5 .6 .7

In this case, the SALT variants for the Unicode character are ignored,
and only the SALT variants for the @list are displayed.  Thus, this
means to display u1230B.1 .. u1230B.4 under RSP006; and u1230B.5
.. u1230B.7 under RSP008.

The special SALT feature .0 is not displayed.  When multiple list
entries share a single Unicode character but only one of them has SALT
variations, this can be used to suppress SALT display:

@form 1(BAN₂@c)
@oid	o0223385
@list	RSP036 .1
@list	RSP036bis .0
@list U+12593
@uname CUNEIFORM NUMERIC SIGN ONE BAN2 CURVED
@uage ACN
@ucun 𒖓
@@

Without the .0, the @list RSP036bis would have no SALT variants, so
all the SALT variants for U+12593 would be displayed.  The use of .0
means that @list RSP036bis has its own SALT variants, ensuring that
the SALT for U+12593 is ignored; but because the @list SALT only
contains .0 the effect is in turn to ensure that no SALT is displayed
for @list RSP036bis.

It is not presently possible to select a distinct reference form for
each @list entry because the reference form belongs to the Unicode
character not to the list entry.


Imperfect List::Unicode Matches
===============================

When a list entry does not match the Unicode character, split the font
entry into the Unicode proper and a SALT variant, as in RSP009/RSP010
which give F₁-ŠA and F₂-ŠA as the fractions, but only the F₁/F₂ parts
correspond to U+1245D/U+1245E.


Sequence List Entries
=====================

Lists often have entries for sequences.  When these exist as OSL @sign
or @form entries, it's only necessary to name them as .liga entries in
the font, e.g., |KU.GAR| = u121AA_u120FB.liga.

Note that it is important to use the OSL naming even when it is
technically wrong--in this case, |DUR₂.GAR| would be better than
|KU.GAR|.

A sequence may reference characters that are not in the list
separately; in this case add the character to the font to ensure the
ligature is included in the feature list:

  RSP018 |U.AN.HI×GAD| u1230B_u1202D_u12132.liga

Needs u12132 as a font entry but |HI×GAD| is not in RSP, so it needs
to be added to the font.

When the sequence does not exist as an OSL @sign, use the @lref
mechanism and give the Unicode signs without spaces to ensure that the
ligature is activated:

@lref	RSP097 NUN-KI 𒉣𒆠 eridu{ki}


Exceptional List Entries
========================

List entries may contain multiple characters that are not
sequences--these can be entered as @lref as above.

List entries may not be representable as a character sequence--these
can be left as plain @lref entries or an image can be given which is
then used in the list page to illustrate the entry:

@lref BAU555 <bau/bau555.png


Corpus Signs not in List
========================

A corpus that is covered by a sign list may have incomplete coverage.
In order to make the list-font usable for cuneifying the corpus it is
necessary to supplement the list with the missing signs and add them
to the font.  One way to do this is to add pseudo-list numbers which
complete the sign list--for example, RSP600 and following (the highest
RSP number is RSP468ter).

The script

 crpneedfnt.sh [PROJECT] [FONT.ofp]

Produces a list of OIDs that are present in the project corpus but not
in the named font.  It must be run in the /home/oracc/PROJECT
directory with necessary permissions.

The output is a table of OID and frequency.  To extract the Unicode data for the list:

 crpneedfnt.sh epsd2/admin/ed3bgirsu /home/oracc/lib/data/Oracc-RSP.ofp >rsp.need
 cut -f1 rsp.need | grep -f - /home/oracc/osl/02pub/unicode.tsv >rsp-need.tsv


Glyph Mismatches
================

Sometimes a corpus-specific sign form is a mismatch to the reference
form, but the corpus-specific form is also defined as a sign or @form
of the reference-form sign.  For example, ED IIIb keš₃ is
ŠUŠ.AN.HI×GAD rather than ŠU(Š)₂.AN.HI×GAD; the first of these is also
defined as an @form of |ŠU₂.AN.HI×GAD|.

If it is prohibitively intrusive to annotate the variant glyph form in
the corpus the reference form in the font can be set to the variant.

In Oracc-RSP it was necessary to add U+122D9 (ŠU₂) so that the
ligature u122D9_u1202D_u12132.liga could be defined.

The glyph-specific form u1230B_u1202D_u12132.liga is also defined in
the font.  In some contexts this could be dealt with using Style Sets
or IVS; that is considered a future option for Oracc-RSP.

